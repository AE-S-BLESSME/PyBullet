import pybullet as p
import pybullet_data
import time

_ = p.connect(p.GUI)		#（“_=”是什么意思？）

p.setAdditionalSearchPath(pybullet_data.getDataPath())

p.setPhysicsEngineParameter(numSolverIterations=10)

# 载入地面模型，useMaximalCoordinates加大坐标刻度可以加快加载
p.loadURDF("plane100.urdf", useMaximalCoordinates=True)

# 创建过程中不渲染
p.configureDebugVisualizer(p.COV_ENABLE_RENDERING, 0)

# 不展示GUI的套件
p.configureDebugVisualizer(p.COV_ENABLE_GUI, 0)

# 禁用 tinyrenderer 
p.configureDebugVisualizer(p.COV_ENABLE_TINY_RENDERER, 0)

p.setGravity(0, 0, -10)

p.setRealTimeSimulation(1)

#然后我们根据pybullet_data下的duck.obj来创建鸭子的视觉模型：

# 创建视觉模型和碰撞箱模型时共用的两个参数
shift = [0, -0.02, 0]
scale = [1, 1, 1]

# 创建视觉形状和碰撞箱形状
visual_shape_id = p.createVisualShape(
    shapeType=p.GEOM_MESH,
    fileName="duck.obj",
    rgbaColor=[1, 1, 1, 1],
    specularColor=[0.4, 0.4, 0],
    visualFramePosition=shift,
    meshScale=scale
)

#再根据pybullet_data下的duck_vhacd.obj文件来创建鸭子的碰撞箱模型：

collision_shape_id = p.createCollisionShape(
    shapeType=p.GEOM_MESH,
    fileName="duck_vhacd.obj",
    collisionFramePosition=shift,
    meshScale=scale
)

#创建完视觉模型和碰撞箱模型后，我们需要将两者使用createMultiBody结合起来：

# 使用创建的视觉形状和碰撞箱形状使用createMultiBody将两者结合在一起
p.createMultiBody(
    baseMass=1,
    baseCollisionShapeIndex=collision_shape_id,
    baseVisualShapeIndex=visual_shape_id,
    basePosition=[0, 0, 2],
    useMaximalCoordinates=True
)

# 创建结束，重新开启渲染
p.configureDebugVisualizer(p.COV_ENABLE_RENDERING, 1)

#与loading函数一样，使用createMultiBody函数创建模型会返回模型的ID。最后我们让程序进入死循环，然后启动它：

for i in range(1000):
    p.stepSimulation()
    time.sleep(1 / 240)
    
